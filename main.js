'use strict';

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã
let score = 0;
let addPerClick = 1;
let addPerSecond = 0;
let level = 1;
let exp = 0;
let maxExp = 100;
let totalClicks = 0;
let casePrice = 1250;

// –°–∫–∏–Ω—ã
let unlockedSkins = ['default'];
let currentSkin = 'default';
const skins = {
    'default': { 
        name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π', 
        url: 'https://pvsz2.ru/statics/plants-big/68.png',
        rarity: 'common',
        unlockedByDefault: true
    },
    'common1': { 
        name: '–†–µ—Ç—Ä–æ', 
        url: 'https://i.pinimg.com/736x/c1/39/78/c139780ac0699dc7ea89b960a7c65db1.jpg',
        rarity: 'common'
    },
    'rare1': { 
        name: '–ó–æ–º–±–∏?', 
        url: 'https://png.klev.club/uploads/posts/2024-04/png-klev-club-felv-p-gorokhostrel-png-29.png',
        rarity: 'rare'
    },
    'epic1': { 
        name: '–ò–ì–†–£–®–ö–ê', 
        url: 'https://static.insales-cdn.com/r/wyLYTi_x4PA/rs:fit:1000:1000:1/plain/images/products/1/6518/738343286/S99b344709a2c437bad3d5228ff5c2989D-removebg-preview.png@png',
        rarity: 'epic'
    },
    'legendary1': { 
        name: '–£–õ–¨–¢–†–ê –ò–ù–°–¢–ò–ù–ö–¢ –ì–û–†–û–•', 
        url: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTtVQyQTbYoKxhSByfHMhQF4zmNxkH6Vm0vPQ&s',
        rarity: 'legendary'
    },
};

// –°–∫–∏–Ω—ã –∑–∞ –∫–ª–∏–∫–∏ (–ü–£–¢–¨) - —ç—Ç–∏ –ù–ï –≤—ã–ø–∞–¥–∞—é—Ç –∏–∑ –∫–µ–π—Å–æ–≤
const clickSkins = {
    'path1': { 
        name: '–ü–£–¢–¨: –õ–µ–¥—è–Ω–æ–π', 
        url: 'https://klev.club/uploads/posts/2023-11/1698878136_klev-club-p-arti-gorokhostrel-zombi-43.jpg',
        rarity: 'path',
        requiredClicks: 1000
    },
    'path2': { 
        name: '–ü–£–¢–¨: –û–≥–Ω–µ–Ω—ã–π', 
        url: 'https://pvsz2.ru/statics/plants-big/31.png',
        rarity: 'path',
        requiredClicks: 10000
    },
    'path3': { 
        name: '–ü–£–¢–¨: —Ç–µ–Ω–µ–≤–æ–π', 
        url: 'https://avatars.mds.yandex.net/i?id=69a2b4239be746c0863ff1d2bf2c2a75_l-8972142-images-thumbs&n=13',
        rarity: 'path',
        requiredClicks: 1000000
    },
   'path3': { 
        name: '–ü–£–¢–¨: –≥—Ä–æ—Ö–æ–º—ë—Ç', 
        url: 'https://static.wikia.nocookie.net/fnaf-fanon-animatronics/images/b/bf/Gatling_Pea_Fixed.png/revision/latest/thumbnail/width/360/height/360?cb=20190519095836&path-prefix=ru',
        rarity: 'path',
        requiredClicks: 25000000
    },
   'path3': { 
        name: '–ü–£–¢–¨: 2', 
        url: 'https://pvsz2.ru/statics/plants-big/90.png',
        rarity: 'path',
        requiredClicks: 500000000
    },
   'path3': { 
        name: '–ü–£–¢–¨: —Ç—Ä–∏—Å—Ç—Ä–µ–ª', 
        url: 'https://pvsz2.ru/statics/plants-big/104.png',
        rarity: 'path',
        requiredClicks: 2500000000
    }
   
};

// –¢–µ–∫—Å—Ç–∞ –¥–ª—è –º–µ–Ω—è—é—â–∏—Ö—Å—è —Å–ª–æ–≤
const changingTexts = [
    "–ö–ª–∏–∫–∞–π –±—ã—Å—Ç—Ä–µ–µ!",
    "–ø—Ä–∏–≤–µ—Ç",
    "–í–∞—É! —Ç—ã –∏–≥—Ä–∞–µ—à—å –≤ —Å–∫—É—á–Ω—ã–π –∫–ª–∏–∫–µ—Ä?",
    "–∞–±–≥—Ä–∞–±–∞–±–∞—Ä–∞ - –î–µ–π–≤",
    "–ó–æ–º–±–∏ –æ—Ç–¥—ã—Ö–∞—é—Ç... –ª–æ–ª",
    "–°–ú–û–¢–†–ò –í –ò–ù–§–û –õ–ò–°–¢–ï –ù–ò–ß–ï–ì–û –ù–ï–¢!!! –ø–æ–¥–æ–∂–¥–∏—Ç–µ–∫–∞...!",
    "–°—Ç–∞–Ω—å –ù–ê–ö–õ–ò–ö–ù–£–¢–´–ú –ö–õ–ò–ö–û–ú –ö–õ–ò–ö–ê–ú–ò –ö–õ–ò–ö–û–°–ò–ö–ò–ê–ú!",
    "–ø–æ–ø—Ä–æ–±—É–π —Ç–∞–∫–∂–µ –≤ Coockie Clicker!",
    "—Ç—ã –Ω–∏—â–∏–π?",
    "–ö–ª–∏–∫–∞–π –º–µ–¥–ª–µ–Ω–µ–µ!",
    "–µ—Å–ª–∏ —á–µ—Å—Ç–Ω–æ —ç—Ç–∞ –∏–≥—Ä–∞ —Ç–æ —ç—Ç–æ —Å–∞–π—Ç —Ç–∏–ø–æ –∏–≥—Ä—ã –≥–¥–µ —Ç—ã –∫–ª–∏–∫–∞–µ—à—å –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–≤–µ—à—å –∫–∞–ø–ª–∏ –≤–æ–¥—ã —Ö–æ—Ç—è –º–æ–∂–µ—à—å –ø–æ–π—Ç–∏ –Ω–∞ –∫—É—Ö–Ω—é –∏ –ø–æ–ø–∏—Ç—å –≤–æ–¥—ã",
    "–≤–∏—Ç–∞–º–∏–Ω D",
    "...",
    "–ø–æ–ø—ã—Ç–∞–π —É–¥–∞—á–∏ –∏ –∏–¥–∏ –≤ –∫–∞–∑–∏–∫! –æ–π —Ç–æ-–µ—Å—Ç—å –æ—Ç–∫—Ä–æ–π –∫–µ–π—Å!",
    "–≤–∏—Ç–∞–º–∏–Ω C –æ–π.. —Ñ–æ—Ç–æ—Å–∏–Ω—Ç–µ–∑... –æ–π –¥–∞ –ø–æ—à–ª–æ",
    "cool... so what the tung sahur - cringe",
    "–¥–æ–ª–≥–æ —Å–∏–¥–∏—à—å",
    "–µ—Å–ª–∏ —á–µ—Å—Ç–Ω–æ —ç—Ç–∞ –∏–≥—Ä–∞ —Ç–æ —ç—Ç–æ —Å–∞–π—Ç —Ç–∏–ø–æ –∏–≥—Ä—ã –≥–¥–µ —Ç—ã –∫–ª–∏–∫–∞–µ—à—å –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–≤–µ—à—å –∫–∞–ø–ª–∏ –≤–æ–¥—ã —Ö–æ—Ç—è –º–æ–∂–µ—à—å –ø–æ–π—Ç–∏ –≤ —Ç—É–∞–ª–µ—Ç. —Å—Ç–æ–ø —è —ç—Ç–æ —É–∂–µ –≥–æ–≤–æ—Ä–∏–ª?",
    "–º–µ–Ω—è –∑–æ–≤—É—Ç –ø–µ—á–µ–Ω—å–∫–∞?",
    "–í–´–ô–î–ò!",
    "–í–¢–û–†–ê–Ø –ü–û–ü–´–¢–ö–ê: –í–´–ô–î–ò!!!!",
    "–∫—Ä—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è?",
    "–≤–∞—É –∫–∞–∫ –¥–æ—Ä–æ–≥–æ —Å—Ç–æ–∏—Ç +250 –Ω–∞ –∫–ª–∏–∫!",
    "... - –≤—Ç–æ—Ä–æ–π —Ä–∞–∑",
    "–û–ú–ì –í –ò–ù–§ –õ–ò–°–¢ –î–û–ë–ê–í–Ø–¢ –ß–¢–û - —Ç–æ –í 1.0.2?!?!?!",
    "–µ—Å–ª–∏ —á–µ—Å—Ç–Ω–æ —ç—Ç–∞ –∏–≥—Ä–∞ —Ç–æ —ç—Ç–æ —Å–∞–π—Ç —Ç–∏–ø–æ –∏–≥—Ä—ã –≥–¥–µ —Ç—ã –∫–ª–∏–∫–∞–µ—à—å –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–≤–µ—à—å –∫–∞–ø–ª–∏ –≤–æ–¥—ã —Ö–æ—Ç—è –º–æ–∂–µ—à—å –ø–æ–π—Ç–∏ –≤ —Å–º –∑–Ω–∞–µ—à—å –∫—É–¥–∞... –∏ –Ω–µ —à–∞–ª–∏",
   "—Å–æ–ª–Ω—Ü—ã —ç—Ç–æ –ø–æ–ª–µ–∑–Ω–æ?",
   "–í–û–ë–©–ï–¢–û –°–û–õ–ù–¶–´ –ï–¢–û –ù–ï –ö–õ–ê–°–ò–í–û–ï –ù–ê–ó–í–ê–ù–ò–ï",
   "–û –ù–û–£, –°–û–õ–ù–¶–ï –ü–ê–î–ê–ï–¢!",
   "–≥–¥–µ –º–æ–π —Ç–∞–∫–æ?",
  "–°–ú–û–¢–†–ò! –≠–¢–û –°–ê–ú–ê–Ø –ë–ï–°–ü–û–õ–ï–ó–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø!"
];

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const scoreEl = document.getElementById('score');
const addEl = document.getElementById('add');
const buttonEl = document.getElementById('button');
const levelEl = document.getElementById('level');
const expEl = document.getElementById('exp');
const maxExpEl = document.getElementById('max-exp');
const progressBar = document.getElementById('level-progress');
const skinsContainer = document.getElementById('skins-container');
const notification = document.getElementById('notification');
const mainContent = document.getElementById('main-content');
const changingTextEl = document.getElementById('changing-text');

// –§—É–Ω–∫—Ü–∏—è –º–µ–Ω—è—é—â–µ–≥–æ—Å—è —Ç–µ–∫—Å—Ç–∞
function startChangingText() {
    let currentIndex = 0;
    
    changingTextEl.textContent = changingTexts[currentIndex];
    
    setInterval(() => {
        currentIndex = (currentIndex + 1) % changingTexts.length;
        changingTextEl.textContent = changingTexts[currentIndex];
    }, 10000);
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã
function saveGame() {
    const gameData = {
        score: score,
        addPerClick: addPerClick,
        addPerSecond: addPerSecond,
        level: level,
        exp: exp,
        maxExp: maxExp,
        totalClicks: totalClicks,
        unlockedSkins: unlockedSkins,
        currentSkin: currentSkin,
        casePrice: casePrice
    };
    localStorage.setItem('gorohostrelSave', JSON.stringify(gameData));
    console.log('–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Å–∫–∏–Ω–æ–≤:', unlockedSkins.length);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã
function loadGame() {
    const saved = localStorage.getItem('gorohostrelSave');
    if (saved) {
        try {
            const gameData = JSON.parse(saved);
            
            score = gameData.score || 0;
            addPerClick = gameData.addPerClick || 1;
            addPerSecond = gameData.addPerSecond || 0;
            level = gameData.level || 1;
            exp = gameData.exp || 0;
            maxExp = gameData.maxExp || 100;
            totalClicks = gameData.totalClicks || 0;
            currentSkin = gameData.currentSkin || 'default';
            casePrice = gameData.casePrice || 1250;
            
            unlockedSkins = gameData.unlockedSkins || ['default'];
            
            console.log('–ò–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Å–∫–∏–Ω–æ–≤:', unlockedSkins.length);
            return true;
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', e);
            return false;
        }
    }
    return false;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
    const loaded = loadGame();
    
    updateDisplay();
    updateLevelDisplay();
    updateCasePriceDisplay();
    checkUpgradesAvailability();
    loadSkins();
    startChangingText();
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–∫–∏–Ω
    const allSkins = {...skins, ...clickSkins};
    if (currentSkin && allSkins[currentSkin]) {
        buttonEl.style.backgroundImage = `url(${allSkins[currentSkin].url})`;
    }
    
    startAutosave();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–∏–Ω—ã —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    checkAllSkinUnlocks();
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∏–∫
buttonEl.onclick = function() {
    score += addPerClick;
    exp += 1;
    totalClicks += 1;
    updateDisplay();
    checkLevelUp();
    checkAllSkinUnlocks();
    checkUpgradesAvailability();
    saveGame();
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–∫–∏–Ω–æ–≤
function checkAllSkinUnlocks() {
    let unlockedNew = false;
    const allSkins = {...skins, ...clickSkins};
    
    for (const skinId in allSkins) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º default —Å–∫–∏–Ω, –æ–Ω —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        if (skinId === 'default') continue;
        
        if (!unlockedSkins.includes(skinId)) {
            const skin = allSkins[skinId];
            let shouldUnlock = false;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–∏–Ω—ã –∑–∞ –∫–ª–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –ü–£–¢–¨ —Å–∫–∏–Ω—ã)
            if (skin.rarity === 'path' && skin.requiredClicks && totalClicks >= skin.requiredClicks) {
                shouldUnlock = true;
                console.log(`–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–∫–∏–Ω –ü–£–¢–¨ ${skin.name} –∑–∞ ${skin.requiredClicks} –∫–ª–∏–∫–æ–≤!`);
            }
            
            if (shouldUnlock) {
                unlockedSkins.push(skinId);
                showNotification(`üéâ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–∫–∏–Ω: ${skin.name}!`);
                unlockedNew = true;
            }
        }
    }
    
    if (unlockedNew) {
        loadSkins();
        saveGame();
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è
function buyUpgrade(type, power, basePrice) {
    const button = event.target.closest('.upgrade-item');
    if (!button) return;
    
    const priceElement = button.querySelector('span');
    const currentPrice = parseInt(priceElement.textContent);
    const requiredLevel = parseInt(button.getAttribute('data-level'));
    
    if (score < currentPrice) {
        showNotification("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞–ø–µ–ª—å!");
        return;
    }
    
    if (level < requiredLevel) {
        showNotification(`–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å ${requiredLevel}!`);
        return;
    }
    
    score -= currentPrice;
    
    if (type.startsWith('click')) {
        addPerClick += power;
        addEl.textContent = addPerClick;
    } else if (type.startsWith('autoclick')) {
        addPerSecond += power;
    }
    
    const newPrice = Math.round(currentPrice * 1.10);
    priceElement.textContent = newPrice;
    
    updateDisplay();
    checkUpgradesAvailability();
    saveGame();
    showNotification("–£–ª—É—á—à–µ–Ω–∏–µ –∫—É–ø–ª–µ–Ω–æ!");
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –∫–µ–π—Å–∞ - –¢–û–õ–¨–ö–û —Å–∫–∏–Ω—ã –∏–∑ –æ–±—ä–µ–∫—Ç–∞ skins (–ù–ï –ü–£–¢–¨)
function buyCase() {
    if (score < casePrice) {
        showNotification("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞–ø–µ–ª—å –¥–ª—è –∫–µ–π—Å–∞!");
        return;
    }
    
    score -= casePrice;
    casePrice = Math.round(casePrice * 1.01);
    updateCasePriceDisplay();
    
    const random = Math.random();
    let wonSkin = null;
    let rarity = '';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å
    if (random < 0.01) {
        rarity = 'legendary';
    } else if (random < 0.1) {
        rarity = 'epic';
    } else if (random < 0.4) {
        rarity = 'rare';
    } else {
        rarity = 'common';
    }
    
    console.log(`–í—ã–ø–∞–ª–∞ —Ä–µ–¥–∫–æ—Å—Ç—å: ${rarity}`);
    
    // –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–∏–Ω—ã —ç—Ç–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ skins (–ù–ï –ü–£–¢–¨)
    const availableSkins = Object.keys(skins).filter(skinId => 
        skins[skinId].rarity === rarity && 
        skinId !== 'default' && 
        !unlockedSkins.includes(skinId)
    );
    
    console.log(`–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–∏–Ω—ã ${rarity} –∏–∑ –∫–µ–π—Å–∞:`, availableSkins);
    
    if (availableSkins.length > 0) {
        wonSkin = availableSkins[Math.floor(Math.random() * availableSkins.length)];
        unlockedSkins.push(wonSkin);
        showNotification(`üéâ –ü–æ–ª—É—á–µ–Ω ${rarity} —Å–∫–∏–Ω: ${skins[wonSkin].name}!`);
        console.log(`–í—ã–∏–≥—Ä–∞–Ω —Å–∫–∏–Ω –∏–∑ –∫–µ–π—Å–∞: ${wonSkin}`);
        loadSkins();
    } else {
        // –ï—Å–ª–∏ –≤—Å–µ —Å–∫–∏–Ω—ã —ç—Ç–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏ —É–∂–µ –µ—Å—Ç—å
        const compensation = Math.round(casePrice * 0.2);
        score += compensation;
        showNotification(`–í—Å–µ —Å–∫–∏–Ω—ã ${rarity} —Ä–µ–¥–∫–æ—Å—Ç–∏ —É–∂–µ –µ—Å—Ç—å! +${compensation} –∫–∞–ø–µ–ª—å`);
        console.log(`–í—Å–µ —Å–∫–∏–Ω—ã ${rarity} —Ä–µ–¥–∫–æ—Å—Ç–∏ —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã`);
    }
    
    updateDisplay();
    checkUpgradesAvailability();
    saveGame();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–Ω—ã –∫–µ–π—Å–∞
function updateCasePriceDisplay() {
    const caseButton = document.querySelector('#cases-tab .upgrade-item');
    if (caseButton) {
        const priceText = caseButton.querySelector('strong').nextSibling;
        if (priceText) {
            priceText.textContent = `–¶–µ–Ω–∞: ${casePrice} –∫–∞–ø–µ–ª—å`;
        }
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫–∏–Ω–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
function loadSkins() {
    skinsContainer.innerHTML = '';
    const allSkins = {...skins, ...clickSkins};
    
    const sortedSkins = [...unlockedSkins].sort((a, b) => {
        const rarityOrder = { 'common': 1, 'rare': 2, 'epic': 3, 'legendary': 4, 'path': 5 };
        return rarityOrder[allSkins[b].rarity] - rarityOrder[allSkins[a].rarity];
    });
    
    sortedSkins.forEach(skinId => {
        if (allSkins[skinId]) {
            const skin = allSkins[skinId];
            const skinItem = document.createElement('button');
            skinItem.className = `skin-item ${currentSkin === skinId ? 'active' : ''}`;
            skinItem.onclick = () => selectSkin(skinId);
            
            skinItem.innerHTML = `
                <img src="${skin.url}" alt="${skin.name}" onerror="this.src='https://pvsz2.ru/statics/plants-big/68.png'">
                <div>${skin.name}</div>
                <small>${skin.rarity}</small>
            `;
            
            skinsContainer.appendChild(skinItem);
        }
    });
    
    console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–∫–∏–Ω–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:', unlockedSkins.length);
}

// –í—ã–±–æ—Ä —Å–∫–∏–Ω–∞
function selectSkin(skinId) {
    const allSkins = {...skins, ...clickSkins};
    if (allSkins[skinId]) {
        currentSkin = skinId;
        buttonEl.style.backgroundImage = `url(${allSkins[skinId].url})`;
        loadSkins();
        saveGame();
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showNotification(message) {
    notification.textContent = message;
    notification.classList.add('show');
    
    setTimeout(() => {
        notification.classList.remove('show');
    }, 3000);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
function checkLevelUp() {
    while (exp >= maxExp) {
        level++;
        exp -= maxExp;
        maxExp = Math.round(maxExp * 1.04);
        showNotification(`üéâ –£—Ä–æ–≤–µ–Ω—å ${level} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!`);
    }
    updateLevelDisplay();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function updateDisplay() {
    scoreEl.textContent = Math.floor(score);
    addEl.textContent = addPerClick;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
function updateLevelDisplay() {
    levelEl.textContent = level;
    expEl.textContent = exp;
    maxExpEl.textContent = maxExp;
    const progressPercent = (exp / maxExp) * 100;
    progressBar.style.width = `${progressPercent}%`;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–∏–π
function checkUpgradesAvailability() {
    const upgradeButtons = document.querySelectorAll('.upgrade-item');
    upgradeButtons.forEach(button => {
        const priceElement = button.querySelector('span');
        let price = 0;
        
        if (priceElement) {
            price = parseInt(priceElement.textContent) || 0;
        } else {
            if (button.querySelector('strong') && button.querySelector('strong').textContent === '–û–±—ã—á–Ω—ã–π –∫–µ–π—Å') {
                price = casePrice;
            }
        }
        
        const requiredLevel = parseInt(button.getAttribute('data-level')) || 1;
        
        if (score >= price && level >= requiredLevel) {
            button.disabled = false;
            button.style.background = 'lightblue';
            button.style.cursor = 'pointer';
        } else {
            button.disabled = true;
            button.style.background = '#7f8c8d';
            button.style.cursor = 'not-allowed';
        }
    });
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª—è–º–∏
function toggleShop() {
    document.getElementById('shop-panel').classList.toggle('active');
    document.getElementById('overlay').classList.toggle('active');
    mainContent.classList.toggle('shop-open');
    if (document.getElementById('shop-panel').classList.contains('active')) {
        checkUpgradesAvailability();
    }
}

function closeShop() {
    document.getElementById('shop-panel').classList.remove('active');
    document.getElementById('overlay').classList.remove('active');
    mainContent.classList.remove('shop-open');
}

function toggleInventory() {
    document.getElementById('inventory-panel').classList.toggle('active');
    document.getElementById('overlay').classList.toggle('active');
}

function closeInventory() {
    document.getElementById('inventory-panel').classList.remove('active');
    document.getElementById('overlay').classList.remove('active');
}

function closeAllPanels() {
    closeShop();
    closeInventory();
}

function openShopTab(tabName) {
    document.querySelectorAll('.shop-content').forEach(tab => {
        tab.classList.remove('active');
    });
    
    document.querySelectorAll('.shop-tab').forEach(tab => {
        tab.classList.remove('active');
    });
    
    document.getElementById(`${tabName}-tab`).classList.add('active');
    event.target.classList.add('active');
    checkUpgradesAvailability();
}

// –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
function startAutosave() {
    setInterval(() => {
        saveGame();
    }, 10000);
}

// –ê–≤—Ç–æ-–∫–ª–∏–∫–µ—Ä
setInterval(() => {
    if (addPerSecond > 0) {
        score += addPerSecond;
        updateDisplay();
        checkUpgradesAvailability();
        saveGame();
    }
}, 1000);

window.addEventListener('beforeunload', () => {
    saveGame();
});

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
initGame();
