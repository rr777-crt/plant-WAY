'use strict';

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–≥—Ä—ã
let score = 0;
let addPerClick = 1;
let addPerSecond = 0;
let level = 1;
let exp = 0;
let maxExp = 100;
let totalClicks = 0;

// –¶–µ–Ω—ã —É–ª—É—á—à–µ–Ω–∏–π


// –°—Ç–∞—Ç—É—Å –ø–æ–∫—É–ø–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π
let boughtUpgrades = {
    click1: false,
    click2: false,
    click3: false,
    click4: false,
    click5: false,
    autoclick1: false,
    autoclick2: false,
    autoclick3: false,
    autoclick4: false
};

// –°–∫–∏–Ω—ã
let unlockedSkins = ['default'];
let currentSkin = 'default';
const skins = {
    'default': { 
        name: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π', 
        url: 'https://pvsz2.ru/statics/plants-big/68.png',
        rarity: 'common'
    },
    'common1': { 
        name: '–†–µ—Ç—Ä–æ', 
        url: 'https://static.wikia.nocookie.net/pvz-fusion/images/5/5c/PeaShooter.png/revision/latest?cb=20250119161122&path-prefix=ru',
        rarity: 'common'
    },
    'rare1': { 
        name: '–ó–æ–º–±–∏?', 
        url: 'https://png.klev.club/uploads/posts/2024-04/png-klev-club-felv-p-gorokhostrel-png-29.png',
        rarity: 'rare'
    },
    'epic1': { 
        name: '–ø—É—Å—Ç–æ—Ç–Ω—ã–π –≥—Ä–æ—Ö–æ—Å—Ç—Ä–µ–ª', 
        url: 'https://static.wikia.nocookie.net/plants-vs-zonbies-wiki/images/5/52/%D0%9F%D0%BE%D1%81%D0%BB%D0%B5%D0%B4%D0%BD%D0%B8%D0%B5_%D0%93%D0%BE%D1%80%D0%BE%D1%85%D0%BE%D1%81%D1%82%D1%80%D0%B5%D0%BB%D1%8B.png/revision/latest?cb=20190304153301&path-prefix=ru',
        rarity: 'epic'
    },
    'legendary1': { 
        name: '–£–õ–¨–¢–†–ê –ò–ù–°–¢–ò–ù–ö–¢ –ì–û–†–û–•', 
        url: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTtVQyQTbYoKxhSByfHMhQF4zmNxkH6Vm0vPQ&s',
        rarity: 'legendary'
    },
};

// –°–∫–∏–Ω—ã –∑–∞ –∫–ª–∏–∫–∏ —Å —Ä–µ–¥–∫–æ—Å—Ç—å—é –ü–£–¢–¨
const clickSkins = {
    'path1': { 
        name: '–ü–£–¢–¨: –õ–µ–¥—è–Ω–æ–π', 
        url: 'https://static.wikia.nocookie.net/fnaf-fanon-animatronics/images/a/a2/Snow_Pea_%28HD_size%29.png/revision/latest?cb=20220305060759&path-prefix=ru',
        rarity: 'path',
        requiredClicks: 1000
    },
    'path2': { 
        name: '–ü–£–¢–¨: –û–≥–Ω–µ–Ω—ã–π', 
        url: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRaLfKjCJeRybo_HA5pSyFISZFrCZJnKqSuiQ&s',
        rarity: 'path',
        requiredClicks: 10000
    },
    'path3': { 
        name: '–ü–£–¢–¨: –æ–≥–æ–Ω—å', 
        url: 'https://pvsz2.ru/statics/plants-big/121.png',
        rarity: 'path',
        requiredClicks: 1000000
    },
    'path4': { 
        name: '–ü–£–¢–¨: –≥–æ—Ä–æ—Ö–Ω—ã–π', 
        url: 'https://static.wikia.nocookie.net/plantsvs-zombies/images/8/80/PvZ2_HD_Pea_Pod.png/revision/latest/smart/width/250/height/250?cb=20140817162420&path-prefix=ru',
        rarity: 'path',
        requiredClicks: 10000000
    }
};

// –¢–µ–∫—Å—Ç–∞ –¥–ª—è –º–µ–Ω—è—é—â–∏—Ö—Å—è —Å–ª–æ–≤
const changingTexts = [
    "–ö–ª–∏–∫–∞–π –±—ã—Å—Ç—Ä–µ–µ!",
    "–í–∞—É! —Ç—ã –∏–≥—Ä–∞–µ—à—å –≤ —Å–∫—É—á–Ω—ã–π –∫–ª–∏–∫–µ—Ä?",
    "–∞–±–≥—Ä–∞–±–∞–±–∞—Ä–∞ - –î–µ–π–≤",
    "–ó–æ–º–±–∏ –æ—Ç–¥—ã—Ö–∞—é—Ç... –ª–æ–ª",
    "–°–ú–û–¢–†–ò –í –ò–ù–§–û –õ–ò–°–¢–ï –ù–ò–ß–ï–ì–û –ù–ï–¢!!!",
    "–°—Ç–∞–Ω—å –ù–ê–ö–õ–ò–ö–ù–£–¢–´–ú –ö–õ–ò–ö–û–ú –ö–õ–ò–ö–ê–ú–ò –ö–õ–ò–ö–û–°–ò–ö–ò–ê–ú!",
     "–ø–æ–ø—Ä–æ–±—É–π —Ç–∞–∫–∂–µ –≤ Coockie Clicker!",
     "—Ç—ã –Ω–∏—â–∏–π?",
     "–ö–ª–∏–∫–∞–π –º–µ–¥–ª–µ–Ω–µ–µ!",
     "–µ—Å–ª–∏ —á–µ—Å—Ç–Ω–æ —ç—Ç–∞ –∏–≥—Ä–∞ —Ç–æ —ç—Ç–æ —Å–∞–π—Ç —Ç–∏–ø–æ –∏–≥—Ä—ã –≥–¥–µ —Ç—ã –∫–ª–∏–∫–∞–µ—à—å –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–≤–µ—à—å –∫–∞–ø–ª–∏ –≤–æ–¥—ã —Ö–æ—Ç—è –º–æ–∂–µ—à—å –ø–æ–π—Ç–∏ –Ω–∞ –∫—É—Ö–Ω—é –∏ –ø–æ–ø–∏—Ç—å –≤–æ–¥—ã",
     "–≤–∏—Ç–∞–º–∏–Ω D",
    
];

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const scoreEl = document.getElementById('score');
const addEl = document.getElementById('add');
const buttonEl = document.getElementById('button');
const levelEl = document.getElementById('level');
const expEl = document.getElementById('exp');
const maxExpEl = document.getElementById('max-exp');
const progressBar = document.getElementById('level-progress');
const skinsContainer = document.getElementById('skins-container');
const notification = document.getElementById('notification');
const mainContent = document.getElementById('main-content');
const changingTextEl = document.getElementById('changing-text');

// –§—É–Ω–∫—Ü–∏—è –º–µ–Ω—è—é—â–µ–≥–æ—Å—è —Ç–µ–∫—Å—Ç–∞
function startChangingText() {
    let currentIndex = 0;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç —Å—Ä–∞–∑—É
    changingTextEl.textContent = changingTexts[currentIndex];
    
    setInterval(() => {
        currentIndex = (currentIndex + 1) % changingTexts.length;
        changingTextEl.textContent = changingTexts[currentIndex];
    }, 10000); // –ú–µ–Ω—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã
function saveGame() {
    const gameData = {
        score: score,
        addPerClick: addPerClick,
        addPerSecond: addPerSecond,
        level: level,
        exp: exp,
        maxExp: maxExp,
        totalClicks: totalClicks,
        upgradePrices: upgradePrices,
        boughtUpgrades: boughtUpgrades,
        unlockedSkins: unlockedSkins,
        currentSkin: currentSkin
    };
    localStorage.setItem('gorohostrelSave', JSON.stringify(gameData));
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã
function loadGame() {
    const saved = localStorage.getItem('gorohostrelSave');
    if (saved) {
        try {
            const gameData = JSON.parse(saved);
            
            score = gameData.score || 0;
            addPerClick = gameData.addPerClick || 1;
            addPerSecond = gameData.addPerSecond || 0;
            level = gameData.level || 1;
            exp = gameData.exp || 0;
            maxExp = gameData.maxExp || 100;
            totalClicks = gameData.totalClicks || 0;
            upgradePrices = gameData.upgradePrices || upgradePrices;
            boughtUpgrades = gameData.boughtUpgrades || boughtUpgrades;
            unlockedSkins = gameData.unlockedSkins || ['default'];
            currentSkin = gameData.currentSkin || 'default';
            
            return true;
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', e);
            return false;
        }
    }
    return false;
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
    const loaded = loadGame();
    
    updateDisplay();
    updateLevelDisplay();
    updatePricesDisplay();
    checkUpgradesAvailability();
    loadSkins();
    startChangingText(); // –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω—è—é—â–∏–π—Å—è —Ç–µ–∫—Å—Ç
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–∫–∏–Ω
    const allSkins = {...skins, ...clickSkins};
    if (currentSkin && allSkins[currentSkin]) {
        buttonEl.style.backgroundImage = `url(${allSkins[currentSkin].url})`;
    }
    
    startAutosave();
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∏–∫
buttonEl.onclick = function() {
    score += addPerClick;
    exp += 1;
    totalClicks += 1;
    updateDisplay();
    checkLevelUp();
    checkSkinUnlocks();
    saveGame();
};

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ —É–ª—É—á—à–µ–Ω–∏—è
function buyUpgrade(type, power, price) {
    const requiredLevel = parseInt(event.target.getAttribute('data-level'));
    const currentPrice = upgradePrices[type];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –ø–æ–∫—É–ø–∫–∏
    if (score < currentPrice) {
        showNotification("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞–ø–µ–ª—å!");
        return;
    }
    
    if (level < requiredLevel) {
        showNotification(`–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å ${requiredLevel}!`);
        return;
    }
    
   
    
    // –°–æ–≤–µ—Ä—à–∞–µ–º –ø–æ–∫—É–ø–∫—É
    score -= currentPrice;
    
    if (type.startsWith('click')) {
        addPerClick += power;
        addEl.textContent = addPerClick;
    } else if (type.startsWith('autoclick')) {
        addPerSecond += power;
    }
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ü–µ–Ω—É –Ω–∞ 17% –¥–ª—è —ç—Ç–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è
    upgradePrices[type] = Math.round(currentPrice * 1.17);
    boughtUpgrades[type] = true;
    
    updateDisplay();
    updatePricesDisplay();
    checkUpgradesAvailability();
    saveGame();
    showNotification("–£–ª—É—á—à–µ–Ω–∏–µ –∫—É–ø–ª–µ–Ω–æ!");
}

// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –∫–µ–π—Å–∞
function buyCase() {
    if (score < 1250) {
        showNotification("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞–ø–µ–ª—å –¥–ª—è –∫–µ–π—Å–∞!");
        return;
    }
    
    score -= 1250;
    
    const random = Math.random();
    let wonSkin = null;
    let rarity = '';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å –ø–æ —à–∞–Ω—Å–∞–º
    if (random < 0.01) {
        rarity = 'legendary';
    } else if (random < 0.1) {
        rarity = 'epic';
    } else if (random < 0.4) {
        rarity = 'rare';
    } else {
        rarity = 'common';
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–∫–∏–Ω –≤—ã–ø–∞–≤—à–µ–π —Ä–µ–¥–∫–æ—Å—Ç–∏
    const availableSkins = Object.keys(skins).filter(skinId => 
        skins[skinId].rarity === rarity && 
        skinId !== 'default' && 
        !unlockedSkins.includes(skinId)
    );
    
    if (availableSkins.length > 0) {
        wonSkin = availableSkins[Math.floor(Math.random() * availableSkins.length)];
    }
    
    if (wonSkin) {
        unlockedSkins.push(wonSkin);
        showNotification(`üéâ –ü–æ–ª—É—á–µ–Ω ${rarity} —Å–∫–∏–Ω: ${skins[wonSkin].name}!`);
        loadSkins();
    } else {
        // –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –µ—Å–ª–∏ —Å–∫–∏–Ω–æ–≤ –Ω–µ—Ç –∏–ª–∏ –≤—Å–µ —É–∂–µ –µ—Å—Ç—å
        const compensation = 250;
        score += compensation;
        showNotification(`–í—Å–µ —Å–∫–∏–Ω—ã ${rarity} —Ä–µ–¥–∫–æ—Å—Ç–∏ —É–∂–µ –µ—Å—Ç—å! +${compensation} –∫–∞–ø–µ–ª—å`);
    }
    
    updateDisplay();
    saveGame();
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
// (checkSkinUnlocks, loadSkins, selectSkin, showNotification, checkLevelUp, updateDisplay, updateLevelDisplay, checkUpgradesAvailability, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª—è–º–∏)

// –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
function startAutosave() {
    setInterval(() => {
        saveGame();
    }, 10000);
}

// –ê–≤—Ç–æ-–∫–ª–∏–∫–µ—Ä
setInterval(() => {
    if (addPerSecond > 0) {
        score += addPerSecond;
        updateDisplay();
        saveGame();
    }
}, 1000);

window.addEventListener('beforeunload', () => {
    saveGame();
});

// –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
initGame();
